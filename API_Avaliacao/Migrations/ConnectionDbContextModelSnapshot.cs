// <auto-generated />
using System;
using API_Avaliacao.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Avaliacao.Migrations
{
    [DbContext(typeof(ConnectionDbContext))]
    partial class ConnectionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Avaliacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Avaliacao");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Certame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("DataFim")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DataInicio")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Certames");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Comissao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("DataFim")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DataInicio")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("comissoes");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Lotacao", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lotacoes");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LotacaoId")
                        .HasColumnType("bigint");

                    b.Property<string>("Matricula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LotacaoId");

                    b.ToTable("Pessoas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("CertamePessoa", b =>
                {
                    b.Property<long>("CertamesId")
                        .HasColumnType("bigint");

                    b.Property<long>("pessoasId")
                        .HasColumnType("bigint");

                    b.HasKey("CertamesId", "pessoasId");

                    b.HasIndex("pessoasId");

                    b.ToTable("CertamePessoa");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Servidor", b =>
                {
                    b.HasBaseType("API_Avaliacao.Domain.Entities.Pessoa");

                    b.Property<long?>("AvaliacaoId")
                        .HasColumnType("bigint");

                    b.HasIndex("AvaliacaoId");

                    b.HasDiscriminator().HasValue("Servidor");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Membro", b =>
                {
                    b.HasBaseType("API_Avaliacao.Domain.Entities.Servidor");

                    b.Property<int?>("Cargo")
                        .HasColumnType("int");

                    b.Property<long?>("ComissaoId")
                        .HasColumnType("bigint");

                    b.HasIndex("ComissaoId");

                    b.HasDiscriminator().HasValue("Membro");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Pessoa", b =>
                {
                    b.HasOne("API_Avaliacao.Domain.Entities.Lotacao", "Lotacao")
                        .WithMany("Pessoas")
                        .HasForeignKey("LotacaoId");

                    b.Navigation("Lotacao");
                });

            modelBuilder.Entity("CertamePessoa", b =>
                {
                    b.HasOne("API_Avaliacao.Domain.Entities.Certame", null)
                        .WithMany()
                        .HasForeignKey("CertamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Avaliacao.Domain.Entities.Pessoa", null)
                        .WithMany()
                        .HasForeignKey("pessoasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Servidor", b =>
                {
                    b.HasOne("API_Avaliacao.Domain.Entities.Avaliacao", "Avaliacao")
                        .WithMany("Servidores")
                        .HasForeignKey("AvaliacaoId");

                    b.Navigation("Avaliacao");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Membro", b =>
                {
                    b.HasOne("API_Avaliacao.Domain.Entities.Comissao", null)
                        .WithMany("Membros")
                        .HasForeignKey("ComissaoId");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Avaliacao", b =>
                {
                    b.Navigation("Servidores");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Comissao", b =>
                {
                    b.Navigation("Membros");
                });

            modelBuilder.Entity("API_Avaliacao.Domain.Entities.Lotacao", b =>
                {
                    b.Navigation("Pessoas");
                });
#pragma warning restore 612, 618
        }
    }
}
